#!/usr/bin/env bash

#
# Display all colors in standard ANSI 256-color palette with their numbers.
# Unlike 24-bit hex RGB notation, this isn't particulary intuitive (it doesn't
# help that 16-color and grayscale palettes are tacked on to each end), so it's
# a lot easier to just look at the palette and pick what you want.  This script
# is designed to present the palette in a sensible format with (generally)
# white numbers on the darker backgrounds and black numbers on the lighter
# ones.
#

#
# Unless we're in vertical mode, this is best viewed with an extra-wide screen,
# so let user know if this output is going to be wrapped.
#

VERT=""

if [ "$1" = "-v" ]
then
	VERT=true
else
	if [ $(tput cols) -lt 146 ]
	then
		echo -e "\nNOTE: best viewed with 146+ char wide display.\n"
	fi
fi

#
# Use %d to format numbers, might make this an option, meanwhile just edit this.
#

NF=d
AFWHT=255
AFBLK=0

#
# Part 1 - basic 16-color palette
# 	Color number is the sum of:
#		1 x Red flag	(0/1)
#		2 x Green flag	(0/1)
#		4 x Blue flag	(0/1)
#		8 x Bright flag	(0/1)
#
# Use white text on dim colors, black text on bright colors (starting with 7)
#

test "$VERT" && CW=3 || CW=9

printf '\e[38;5;%dm' $AFWHT
for COLR in {0..15}
do
	printf "\e[48;5;%dm" $COLR ; printf "%${CW}${NF}" $COLR
	test $COLR = 6 && printf '\e[38;5;%dm'
	test $COLR = 7 -a "$VERT" && printf '\e[0m \n\e[38;5;%dm'
done
printf '\e[0m \n'

#
# Part 2 - the 6x6x6 (216 colors) "color cube" palette 
# 	Color number is the sum of:
#		36 x Red level	(0-5)
#		 6 x Green level(0-5)
#		 1 x Blue levl  (0-5)
#		16 (offset for the 16-color palette)
#
# Rows start with white numbers, switch to black as colors get brighter.  In
# horizontal format, black numbers start 2 positions earlier on each row,
# marked with WHMAX.
#

test "$VERT" && RMAX=35 || RMAX=5

WHMAX=17
#for ROW in {0..5}
for ROW in $(seq 0 $RMAX)
do
	if [ "$VERT" ]
	then
		if [ $(( ROW % 6 )) -gt 1 ]
		then
			printf '\e[38;5;%dm' $AFBLK
		else
			printf '\e[38;5;%dm' $AFWHT
		fi
	else
		printf '\e[38;5;%dm' $AFWHT
	fi

	if [ $ROW -eq 0 ]
	then
		COLROW=16
		test "$VERT" && RSIZE=6 || RSIZE=36
	fi
	for (( COLCEL = 0 ;  $COLCEL < $RSIZE ; COLCEL++  ))
	do

		COLR=$(( COLROW + COLCEL ))
		printf '\e[48;5;%dm' $COLR ; printf " %3${NF}" $COLR
		if [ -z "$VERT" ]
		then
			test $COLCEL = $WHMAX && printf '\e[38;5;%dm' $AFBLK
		fi
	done
	COLROW=$(( COLROW + RSIZE ))
	test -z "$VERT" && WHMAX=$(( WHMAX - 2 ))
	#printf ' \e[0m \n'
	printf '\e[0m \n'
done

#
# Part 3 - 24-shade grayscale palette
#	Number is the gray level (0 = black, 23 = white)
#	plus offset of 232 for previous palettes.
#
# Use white text on dark shades, black text on light shades
#

test "$VERT" && CW=3 || CW=5

printf '\e[38;5;%dm' $AFWHT
for COLR in {232..255}
do
	printf '\e[48;5;%dm' $COLR ; printf " %${CW}${NF}" $COLR
	#if [ $COLR = 243 ]
	#then
		#test "$VERT" && printf '\e[0m \n'
	#	printf '\e[38;5;%dm' $AFBLK
	#fi
	[[ $COLR == @(237|243|249) && "$VERT" ]] && printf '\e[0m \n'
	[[ $COLR == 237 ]] && printf '\e[38;5;%dm' $AFWHT
	[[ $COLR == @(243|249) ]] && printf '\e[38;5;%dm' $AFBLK


done

printf '\e[0m \n'

tput sgr0

################################
# END
################################
